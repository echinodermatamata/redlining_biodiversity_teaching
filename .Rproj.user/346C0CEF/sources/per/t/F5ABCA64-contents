---
title: "Untitled"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## R Markdown

This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.

When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. 


## Installing packages

## Loading Libraries


## Our research question  
The question we are ultimately going to be asking is how does urban development affect bird biodiversity?

We are particularly interested in the long-term ecological effects of systemic rascism in urban areas and are focusing on how rascist economic policies that affect investment in infastructure and development affect the modern day inhabitants of those areas, whether they are human or other. 

We are going to use bird-watching data collected in 2018 to begin our exploration of this question. You have already completed a map of the redlining grades (A,B,C, & D) for the Atlanta area. Now we are going to ask whether there is a relationship between the grades that an area received during redlining and the diversity in bird species we see in that area today. 


## Open a new project in R
First we will need to start a new project. So, go ahead and open a new project in R.

Call it "redlining" and make sure you save it in a spot you can find again. 

## Import data
We are going to import data from Fulton county the was collected in 2018 and is publicly available through Project eBird. Project eBird works with the Audobon Society and Cornell University to collect and make available the bird watching records of bird watchers around the world, with a particular focus on North America. 

There is A LOT of data here, so for today we are just going to focus on one county and one year. 

We are going to call the data "data2018" and we are going to download the file from Canvas. Download it into the same folder as your project so that you can open it using the line of code below. 

```{r}
data2018<- read.delim("ebd_US-GA-121_201801_201812_relMar-2021.txt")
```

## Dates 

We've got some dates in here. Particularly dates that bird observations occurred on. These can be tricky for programs to read, so we are going to use the "lubridate" package that we previously installed to take care of that for use and allow use to manipulate the dates how we want to. 

```{r}
# Format Date-- This line of code uses the lubridate package to properly format the
##dates so that they are easier to use in downstream analyses
data2018$OBSERVATION_DATE <- as.Date(data2018$OBSERVATION.DATE, format="%Y-%m-%d")

# add year to the dataframe
data2018$YEAR <- year(data2018$OBSERVATION.DATE)
```

## Cleaning up our data

So, this is real-world data. In fact, this is even more extreme. It's citizen collected data. So it's going to need a bit of work to get just the data we need to answer our question about biodiversity in a particular area. 

If you look at the data2018 dataframe it has 49 variables- which is a lot, so let's take out only the variables we really want. Let's also get rid of any duplicates and keep only each unique sampling event (birdwatching event) in the dataset using the function "distinct()" in the dplyr package. 

We will compile this into a new dataframe we're going to call "sampling_event_info". We're later going to compile these all together, but for right now we're going to store this info in separate dataframes. 

```{r}
# add all the columns needed for the analysis (that don't vary within checklist)
sampling_event_info <- data2018 %>%
  select(SAMPLING.EVENT.IDENTIFIER, LOCALITY, LOCALITY.ID, OBSERVATION.DATE,
         PROTOCOL.TYPE, ALL.SPECIES.REPORTED, EFFORT.DISTANCE.KM, EFFORT.AREA.HA,
         DURATION.MINUTES, YEAR, GROUP.IDENTIFIER, LATITUDE, LONGITUDE) %>%
  distinct()

```

There's also times where folks put "x" in their birdwatching checklist instead of numbers. So, I saw that bird, so instead of putting the number of that bird I saw, I'll just put an "x". We have to deal with that too. So we'll put a bit of code in that creates a dataframe that pulls those birdwatching lists out and call it "X_missing"

```{r}

# Counts how many 'x's per checklist
X_missing <- data2018 %>%
  group_by(SAMPLING.EVENT.IDENTIFIER) %>%
  summarise(number_X = sum(OBSERVATION.COUNT=="X"))
```

This step joins up the sampling_event_info and X_missing data all into one cleaned up dataframe "data2018_clean"
Also:
accounts for the instance in which people submit the same species both at the species and subspecies level and it also makes it so only 'species' and 'issf' category are included in analysis

It puts it all together into a new dataframe called the "data2018_clean" dataframe.

```{r}
data2018_clean <- data2018 %>%
  filter(CATEGORY %in% c("species","issf")) %>%
  group_by(SAMPLING.EVENT.IDENTIFIER, COMMON.NAME) %>%
  summarise(COUNT.SPP = sum(as.numeric(as.character(OBSERVATION.COUNT)))) %>%
  rename(OBSERVATION.COUNT = COUNT.SPP) %>%
  inner_join(., sampling_event_info, by="SAMPLING.EVENT.IDENTIFIER")%>%
  inner_join(., X_missing, by="SAMPLING.EVENT.IDENTIFIER")
```

## Using pipes to filter the data a bit more
So now we're going to use pipes again. You remember pipes %>% which let us pass our data frame from one thing to another? Yeah! 

We're going to use those again to do a bit more filtering.



